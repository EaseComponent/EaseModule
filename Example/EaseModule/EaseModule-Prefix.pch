//
//  Prefix header
//
//  The contents of this file are implicitly included at the beginning of every source file.
//

#import <Availability.h>

#ifndef __IPHONE_5_0
#warning "This project uses features only available in iOS SDK 5.0 and later."
#endif

#ifdef __OBJC__
    @import UIKit;
    @import Foundation;
#import "NSString+Common.h"
#import <Masonry/Masonry.h>
#import "UIColor+Common.h"
#import <SDWebImage/UIImageView+WebCache.h>
#import "NSArray+Sugar.h"

#ifndef weakify
    #if DEBUG
        #if __has_feature(objc_arc)
        #define weakify(object) autoreleasepool{} __weak __typeof__(object) weak##_##object = object;
        #else
        #define weakify(object) autoreleasepool{} __block __typeof__(object) block##_##object = object;
        #endif
    #else
        #if __has_feature(objc_arc)
        #define weakify(object) try{} @finally{} {} __weak __typeof__(object) weak##_##object = object;
        #else
        #define weakify(object) try{} @finally{} {} __block __typeof__(object) block##_##object = object;
        #endif
    #endif
#endif

#ifndef strongify
    #if DEBUG
        #if __has_feature(objc_arc)
        #define strongify(object) autoreleasepool{} __typeof__(object) object = weak##_##object;
        #else
        #define strongify(object) autoreleasepool{} __typeof__(object) object = block##_##object;
        #endif
    #else
        #if __has_feature(objc_arc)
        #define strongify(object) try{} @finally{} __typeof__(object) object = weak##_##object;
        #else
        #define strongify(object) try{} @finally{} __typeof__(object) object = block##_##object;
        #endif
    #endif
#endif


NS_INLINE NSString * EaseSafeString(NSString *string){
    if (![string isKindOfClass:[NSString class]]) {
        string = [NSString stringWithFormat:@"%@",string];
    }
    if (string == nil ||
        string == NULL ||
        [string isKindOfClass:[NSNull class]] ||
        [string isKindOfClass:[NSNull class]] ||
        [string isEqualToString:@""] ||
        [[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] length] == 0){
        return @"";
    }
    return string;
}

NS_INLINE NSURL * EaseSafeURL(NSString *string){
    NSURL * URL = [NSURL URLWithString:EaseSafeString(string)];
    URL = (URL == nil) ? [NSURL URLWithString:@""] : URL;
    return URL;
}
#endif
